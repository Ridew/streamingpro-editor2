/* The following code was generated by JFlex 1.4.1 on 4/5/17 6:47 PM */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;

import jsyntaxpane.DefaultLexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/5/17 6:47 PM from the specification file
 * <tt>/Users/allwefantasy/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/dosbatch.flex</tt>
 */
public final class DOSBatchLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\5\2\0\1\4\22\0\1\0\15\0\1\0\1\0"+
    "\12\34\1\32\5\0\1\6\1\14\1\27\1\7\1\24\1\2\1\20"+
    "\1\12\1\10\1\17\1\33\1\30\1\15\1\3\1\26\1\11\1\22"+
    "\1\33\1\1\1\21\1\13\1\31\1\25\1\33\1\16\1\23\1\33"+
    "\4\0\1\34\1\0\1\14\1\27\1\7\1\24\1\2\1\20\1\12"+
    "\1\10\1\17\1\33\1\30\1\15\1\3\1\26\1\11\1\22\1\33"+
    "\1\1\1\21\1\13\1\31\1\25\1\33\1\16\1\23\1\33\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\5\1\1\2\20\1\23\0\1\2\27\0\1\3"+
    "\1\2\3\0\1\2\24\0\1\2\1\0\1\2\10\0"+
    "\1\2\2\0\3\4\11\0\1\2\6\0\1\2\24\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\35\0\256"+
    "\0\313\0\350\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\u027e"+
    "\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c\0\u0349\0\u0366"+
    "\0\u0383\0\u03a0\0\u03bd\0\u03da\0\u03f7\0\u0414\0\u0431\0\u044e"+
    "\0\u046b\0\u0488\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536"+
    "\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e"+
    "\0\u063b\0\u0658\0\u0675\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706"+
    "\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee"+
    "\0\u080b\0\u0828\0\u0845\0\u0862\0\u087f\0\u089c\0\u08b9\0\u08d6"+
    "\0\u08f3\0\u0910\0\u092d\0\u094a\0\u0967\0\u0984\0\u09a1\0\u09be"+
    "\0\u09db\0\u09f8\0\u0a15\0\u0a32\0\u0a4f\0\u0a6c\0\u089c\0\u0a89"+
    "\0\u0aa6\0\u0ac3\0\u0ae0\0\u0afd\0\u0b1a\0\u0b37\0\u0b54\0\u0b71"+
    "\0\u0b8e\0\u0bab\0\u077a\0\u0bc8\0\35\0\u0be5\0\u0c02\0\u0c1f"+
    "\0\u0c3c\0\u0c59\0\u0c76\0\u0c93\0\u0cb0\0\u0ccd\0\u0cea\0\u0d07"+
    "\0\u0d24\0\u0d41\0\u0d5e\0\u0d7b\0\u0d98\0\u0db5\0\u0dd2\0\u0def"+
    "\0\u0e0c\0\u0e29\0\u0e46\0\u0e63\0\u0e80\0\u0e9d\0\u0eba\0\u0ed7"+
    "\0\u0ef4\0\u0f11\0\u0f2e\0\u0f4b\0\u0f68\0\u0f85\0\u0fa2\0\u0fbf"+
    "\0\u0fdc\0\u0ff9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\2\1\23\1\24\1\2\1\25"+
    "\1\26\1\2\1\27\2\2\37\0\1\30\1\31\20\0"+
    "\1\7\11\0\1\32\5\0\1\33\5\0\1\34\1\35"+
    "\7\0\1\36\17\0\1\37\12\0\1\7\3\0\1\31"+
    "\11\0\1\2\32\0\1\40\4\0\1\41\1\42\2\0"+
    "\1\43\1\44\6\0\1\7\12\0\1\45\33\0\1\46"+
    "\7\0\1\47\24\0\1\50\15\0\1\51\3\0\1\52"+
    "\24\0\1\53\5\0\1\54\1\55\26\0\1\56\27\0"+
    "\1\57\45\0\1\7\23\0\1\7\1\0\1\60\1\0"+
    "\1\61\3\0\1\62\17\0\1\63\5\0\1\64\1\65"+
    "\1\0\1\66\15\0\1\67\4\0\1\70\7\0\1\71"+
    "\2\0\1\72\14\0\1\73\5\0\1\74\6\0\1\75"+
    "\2\0\1\76\2\0\1\77\17\0\1\100\6\0\1\74"+
    "\24\0\1\101\35\0\1\102\33\0\3\103\3\0\23\103"+
    "\1\0\1\103\4\0\1\104\3\0\1\105\11\0\1\106"+
    "\1\107\3\0\1\110\32\0\1\111\11\0\1\112\12\0"+
    "\1\34\30\0\1\113\45\0\1\114\32\0\1\115\41\0"+
    "\1\116\11\0\1\114\22\0\2\114\33\0\1\7\17\0"+
    "\1\117\14\0\1\111\3\0\1\120\7\0\1\121\11\0"+
    "\1\122\4\0\1\123\3\0\1\124\15\0\1\125\5\0"+
    "\1\74\40\0\1\7\30\0\1\117\33\0\1\126\33\0"+
    "\1\113\23\0\1\114\35\0\1\114\7\0\1\127\43\0"+
    "\1\114\25\0\1\130\42\0\1\131\35\0\1\132\41\0"+
    "\1\133\16\0\1\134\24\0\1\135\56\0\1\52\37\0"+
    "\1\136\21\0\1\137\40\0\1\140\16\0\1\115\47\0"+
    "\1\65\47\0\1\141\16\0\1\142\5\0\1\143\37\0"+
    "\1\40\25\0\1\144\15\0\1\34\24\0\1\145\30\0"+
    "\1\7\40\0\1\146\26\0\1\114\22\0\1\7\17\0"+
    "\1\147\14\0\1\150\35\0\1\151\55\0\1\152\12\0"+
    "\3\103\3\0\23\103\1\0\2\103\4\153\1\154\1\155"+
    "\27\153\11\0\1\156\36\0\1\157\36\0\1\160\33\0"+
    "\1\161\37\0\1\162\26\0\1\163\34\0\1\7\25\0"+
    "\1\7\45\0\1\7\36\0\1\164\41\0\1\7\36\0"+
    "\1\165\1\0\1\166\30\0\1\167\23\0\1\162\46\0"+
    "\1\7\36\0\1\170\24\0\1\44\37\0\1\171\31\0"+
    "\1\114\20\0\1\172\44\0\1\173\25\0\1\174\34\0"+
    "\1\74\54\0\1\123\15\0\1\175\55\0\1\176\30\0"+
    "\1\115\35\0\1\115\16\0\1\177\57\0\1\115\16\0"+
    "\1\7\34\0\1\40\54\0\1\200\34\0\1\201\23\0"+
    "\1\202\31\0\1\203\47\0\1\7\12\0\1\155\54\0"+
    "\1\204\20\0\1\205\37\0\1\206\23\0\1\114\32\0"+
    "\1\7\34\0\1\207\44\0\1\210\44\0\1\203\26\0"+
    "\1\211\35\0\1\212\22\0\1\65\45\0\1\213\40\0"+
    "\1\152\24\0\1\7\53\0\1\40\22\0\1\115\41\0"+
    "\1\214\35\0\1\115\14\0\1\123\41\0\1\215\45\0"+
    "\1\123\44\0\1\7\6\0\1\162\33\0\1\114\42\0"+
    "\1\114\42\0\1\216\26\0\1\217\45\0\1\44\23\0"+
    "\1\115\41\0\1\220\33\0\1\162\32\0\1\221\25\0"+
    "\1\222\46\0\1\74\47\0\1\74\10\0\1\117\16\0"+
    "\1\123\37\0\1\133\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4118];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\20\1\23\0\1\1\27\0"+
    "\2\1\3\0\1\1\24\0\1\1\1\0\1\1\10\0"+
    "\1\1\2\0\2\1\1\11\11\0\1\1\6\0\1\1"+
    "\24\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[146];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public DOSBatchLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength());
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DOSBatchLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DOSBatchLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return token(TokenType.KEYWORD);
          }
        case 5: break;
        case 3: 
          { return token(TokenType.TYPE);
          }
        case 6: break;
        case 1: 
          { /* skip */
          }
        case 7: break;
        case 4: 
          { return token(TokenType.COMMENT);
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
