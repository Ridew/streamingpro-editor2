/* The following code was generated by JFlex 1.4.1 on 4/5/17 6:47 PM */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;

import jsyntaxpane.DefaultLexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/5/17 6:47 PM from the specification file
 * <tt>/Users/allwefantasy/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/python.flex</tt>
 */
public final class PythonLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ML_STRING = 2;
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\75\1\76"+
    "\1\4\1\100\1\70\1\70\1\0\1\60\1\61\1\66\1\22\1\73"+
    "\1\22\1\20\1\67\1\7\1\15\2\14\4\16\2\10\1\73\1\73"+
    "\1\71\1\74\1\72\1\100\1\73\4\13\1\21\1\17\2\5\1\53"+
    "\1\77\1\5\1\11\1\5\1\52\5\5\1\54\3\5\1\12\2\5"+
    "\1\64\1\23\1\65\1\70\1\6\1\73\1\24\1\33\1\35\1\26"+
    "\1\30\1\42\1\47\1\51\1\40\1\57\1\34\1\36\1\46\1\25"+
    "\1\37\1\44\1\5\1\31\1\27\1\32\1\41\1\55\1\50\1\43"+
    "\1\45\1\56\1\62\1\70\1\63\1\73\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\1\3\1\1\2\4\1\3\1\5"+
    "\1\3\1\5\31\3\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\5\5\1\1\1\14\1\15\1\16\2\17\1\1"+
    "\1\20\2\21\1\1\2\2\1\0\3\4\1\0\4\4"+
    "\1\0\3\3\1\22\40\3\1\22\3\3\1\22\1\23"+
    "\1\22\1\3\1\22\25\3\1\0\1\24\2\16\3\0"+
    "\4\4\1\0\4\3\1\22\1\3\1\23\36\3\1\23"+
    "\24\3\1\25\1\16\1\26\2\0\2\4\10\3\1\22"+
    "\27\3\2\0\2\4\11\3\1\22\13\3\2\0\2\4"+
    "\13\3\1\22\1\3\2\0\2\4\6\3\1\23\2\4"+
    "\3\3\2\4\1\3\2\4\1\3\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\u0a28\0\u0a69"+
    "\0\u0aaa\0\u0aeb\0\303\0\u038e\0\u0b2c\0\303\0\u0b6d\0\u0bae"+
    "\0\303\0\u0bef\0\303\0\u0c30\0\303\0\u0c71\0\u0cb2\0\303"+
    "\0\u0cf3\0\u0d34\0\u0d75\0\303\0\u0db6\0\u0df7\0\u0e38\0\u0e79"+
    "\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081"+
    "\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289"+
    "\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699"+
    "\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u01c7\0\u19a5\0\u19e6\0\u01c7\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\303\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u234b\0\u23cd"+
    "\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5"+
    "\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u234b\0\u2f3a\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\303\0\303\0\303\0\u307f\0\u30c0\0\u3101"+
    "\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u1860"+
    "\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8"+
    "\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8"+
    "\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u3caf"+
    "\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7"+
    "\0\u4308\0\u1040\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e"+
    "\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\303\0\u4614\0\u4655"+
    "\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d"+
    "\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65"+
    "\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\3\10\3\13\1\14\1\15\1\16\1\17\1\4"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\10\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\10"+
    "\1\46\1\47\1\50\1\10\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\17\1\61\1\62\1\63"+
    "\1\17\1\64\1\65\1\10\1\66\1\67\1\70\1\71"+
    "\20\67\1\72\52\67\1\73\3\67\1\74\1\75\20\67"+
    "\1\72\52\67\1\76\2\67\103\0\1\4\101\0\1\6"+
    "\75\0\1\7\1\77\1\100\76\7\5\0\13\10\1\0"+
    "\1\10\2\0\34\10\17\0\1\10\7\0\1\101\101\0"+
    "\1\102\1\103\1\104\1\105\1\0\1\106\1\107\1\106"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\1\105\44\0\2\13\1\104\2\0\3\13\1\110"+
    "\1\111\1\112\6\0\1\112\5\0\1\104\3\0\1\110"+
    "\43\0\13\10\1\0\1\10\2\0\1\113\33\10\17\0"+
    "\1\10\10\0\2\111\3\0\3\111\67\0\13\10\1\0"+
    "\1\10\2\0\12\10\1\114\21\10\17\0\1\10\75\0"+
    "\1\63\11\0\13\10\1\0\1\10\2\0\1\10\1\115"+
    "\1\10\1\116\3\10\1\117\10\10\1\120\13\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\13\10\1\121"+
    "\20\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\122\7\10\1\123\17\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\124\1\10\1\125"+
    "\3\10\1\126\1\127\1\10\1\130\16\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\10\1\131\10\10"+
    "\1\132\4\10\1\133\11\10\1\134\2\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\135\3\10\1\136"+
    "\6\10\1\137\20\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\5\10\1\140\7\10\1\141\3\10\1\142"+
    "\12\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\5\10\1\143\5\10\1\144\1\10\1\145\16\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\146\11\10"+
    "\1\147\1\150\6\10\1\151\2\10\1\152\6\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\153\3\10"+
    "\1\154\6\10\1\155\1\156\17\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\157\1\10\1\160"+
    "\1\10\1\161\6\10\1\162\13\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\10\1\163\1\164\1\165"+
    "\2\10\1\166\7\10\1\167\3\10\1\170\11\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\10\1\171"+
    "\32\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\5\10\1\172\4\10\1\173\1\174\1\175\17\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\5\10\1\176"+
    "\26\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\177\4\10\1\200\5\10\1\201\20\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\14\10\1\202\17\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\1\203"+
    "\13\10\1\154\17\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\204\5\10\1\205\21\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\14\10\1\206"+
    "\10\10\1\207\6\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\210\3\10\1\211\27\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\13\10\1\212\20\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\5\10"+
    "\1\213\26\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\1\214\33\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\14\10\1\151\17\10\17\0\1\10\67\0"+
    "\1\17\5\0\1\63\73\0\1\17\4\0\1\63\75\0"+
    "\1\17\1\63\1\0\1\63\76\0\1\17\1\0\1\63"+
    "\102\0\1\215\2\0\1\67\2\0\20\67\1\0\52\67"+
    "\1\0\2\67\2\0\1\71\76\0\2\216\1\0\4\216"+
    "\1\217\4\216\2\217\1\220\62\216\2\0\1\75\174\0"+
    "\1\221\4\0\1\100\123\0\1\222\12\0\1\223\47\0"+
    "\1\102\1\103\1\104\2\0\1\106\1\107\1\106\1\110"+
    "\1\111\1\112\6\0\1\112\5\0\1\104\3\0\1\110"+
    "\45\0\2\103\3\0\3\103\1\110\1\111\1\112\6\0"+
    "\1\112\11\0\1\110\45\0\1\224\1\225\2\0\5\225"+
    "\1\0\1\225\2\0\1\225\1\0\1\225\1\0\1\225"+
    "\2\0\1\225\1\0\1\225\4\0\1\225\45\0\1\226"+
    "\1\103\1\104\2\0\3\226\1\110\1\111\1\112\6\0"+
    "\1\112\5\0\1\104\3\0\1\110\45\0\1\106\1\103"+
    "\1\104\2\0\3\106\1\110\1\111\1\112\6\0\1\112"+
    "\5\0\1\104\3\0\1\110\115\0\1\104\17\0\1\104"+
    "\10\0\2\111\3\0\3\111\1\110\1\0\1\112\6\0"+
    "\1\112\11\0\1\110\45\0\2\227\3\0\3\227\3\0"+
    "\1\230\63\0\13\10\1\0\1\10\2\0\12\10\1\231"+
    "\21\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\232\21\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\2\10\1\167\31\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\3\10\1\233\30\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\3\10\1\164"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\20\10\1\234\13\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\6\10\1\167\25\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\12\10\1\235\3\10\1\167"+
    "\15\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\5\10\1\164\3\10\1\161\17\10\1\236\2\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\6\10\1\237"+
    "\3\10\1\240\21\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\241\4\10\1\164\26\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\14\10\1\242\17\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\5\10"+
    "\1\243\26\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\20\10\1\166\1\10\1\164\11\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\15\10\1\244\16\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\3\10"+
    "\1\245\10\10\1\240\17\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\4\10\1\246\4\10\1\247\22\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\1\250"+
    "\33\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\10\1\251\12\10\1\252\7\10\1\253\7\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\2\10\1\254"+
    "\3\10\1\255\3\10\1\256\5\10\1\152\10\10\1\257"+
    "\2\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\15\10\1\260\16\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\21\10\1\167\12\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\20\10\1\261\13\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\20\10\1\262"+
    "\13\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\263\27\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\250\20\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\16\10\1\264\15\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\12\10\1\265"+
    "\21\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\266\33\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\1\10\1\267\2\10\1\270\15\10\1\271\11\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\20\10"+
    "\1\164\13\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\5\10\1\164\26\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\22\10\1\272\11\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\10\1\164\32\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\1\10"+
    "\1\273\7\10\1\274\22\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\3\10\1\161\30\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\2\10\1\164\31\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\33\10"+
    "\1\275\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\6\10\1\164\25\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\154\27\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\6\10\1\276\11\10\1\277"+
    "\13\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\300\10\10\1\301\17\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\152\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\20\10\1\302"+
    "\13\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\14\10\1\303\17\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\304\20\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\13\10\1\305\20\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\5\10\1\167"+
    "\26\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\10\1\306\10\10\1\307\21\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\310\33\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\3\10\1\311\30\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\13\10"+
    "\1\312\1\313\17\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\24\10\1\164\7\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\314\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\17\10\2\164"+
    "\13\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\6\10\1\315\25\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\316\20\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\6\10\1\317\25\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\14\10\1\320"+
    "\17\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\321\30\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\12\10\1\151\4\10\1\164\14\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\10\1\262"+
    "\4\10\1\322\25\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\15\10\1\262\16\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\117\26\10\17\0"+
    "\1\10\77\0\1\323\11\0\1\220\4\0\3\220\71\0"+
    "\1\324\4\0\3\324\160\0\1\325\26\0\1\326\122\0"+
    "\1\327\41\0\1\224\1\225\1\104\1\0\5\225\1\0"+
    "\1\225\2\0\1\225\1\0\1\225\1\0\1\225\2\0"+
    "\1\225\1\0\1\225\1\104\3\0\1\225\45\0\2\330"+
    "\1\104\1\0\5\330\1\0\1\330\2\0\1\330\1\0"+
    "\1\330\1\0\1\330\2\0\1\330\1\0\1\330\1\104"+
    "\3\0\1\330\45\0\1\331\1\103\1\104\2\0\3\331"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\45\0\2\227\3\0\3\227\1\110\22\0\1\110"+
    "\45\0\2\227\3\0\3\227\67\0\13\10\1\0\1\10"+
    "\2\0\3\10\1\262\30\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\14\10\1\332\17\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\4\10\1\333\27\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\12\10"+
    "\1\334\21\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\1\335\33\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\22\10\1\336\11\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\16\10\1\167\15\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\6\10\1\337"+
    "\25\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\262\22\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\6\10\1\340\25\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\22\10\1\341\11\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\4\10\1\167"+
    "\27\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\342\22\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\343\27\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\12\10\1\164\21\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\23\10\1\262"+
    "\10\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\245\30\10\17\0\1\10\6\0\1\10\1\344"+
    "\11\10\1\0\1\10\2\0\34\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\15\10\1\242\16\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\15\10\1\345"+
    "\16\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\13\10\1\346\20\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\347\27\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\10\1\350\32\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\12\10\1\262"+
    "\21\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\164\27\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\351\33\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\16\10\1\166\15\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\12\10\1\352\21\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\3\10"+
    "\1\353\30\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\6\10\1\354\25\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\5\10\1\242\26\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\20\10\1\355\13\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\7\10"+
    "\1\356\24\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\23\10\1\164\10\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\1\357\33\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\360\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\4\10\1\361"+
    "\27\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\15\10\1\161\16\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\15\10\1\362\16\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\10\1\363\32\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\13\10\1\333"+
    "\20\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\11\10\1\364\22\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\22\10\1\167\7\10\1\365\1\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\161\33\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\1\366"+
    "\33\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\164\1\10\1\166\25\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\10\1\251\32\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\3\10\1\167"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\20\10\1\367\13\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\10\1\121\32\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\12\10\1\115\21\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\7\10\1\370"+
    "\24\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\25\10\1\167\6\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\12\10\1\245\21\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\335\24\10\1\164\6\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\27\10"+
    "\1\371\4\10\17\0\1\10\47\0\1\372\76\0\1\373"+
    "\43\0\2\374\1\104\1\0\5\374\1\0\1\374\2\0"+
    "\1\374\1\0\1\374\1\0\1\374\2\0\1\374\1\0"+
    "\1\374\1\104\3\0\1\374\45\0\1\375\1\103\1\104"+
    "\2\0\3\375\1\110\1\111\1\112\6\0\1\112\5\0"+
    "\1\104\3\0\1\110\43\0\13\10\1\0\1\10\2\0"+
    "\20\10\1\376\13\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\5\10\1\121\26\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\21\10\1\164\12\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\6\10\1\377"+
    "\25\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\13\10\1\350\20\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\14\10\1\u0100\17\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\350\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\4\10\1\u0101"+
    "\27\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\16\10\1\u0102\15\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\20\10\1\121\13\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\14\10\1\u0103\17\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\5\10\1\u0104"+
    "\26\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\350\33\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\5\10\1\u0105\26\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\10\10\1\167\23\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\u0106\33\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\3\10\1\u0107"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\14\10\1\u0108\17\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\12\10\1\u0109\1\10\1\261\17\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\2\10\1\u010a"+
    "\31\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\117\21\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\11\10\1\161\22\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\154\26\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\7\10\1\u010b"+
    "\24\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\3\10\1\u010c\30\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\13\10\1\u010d\11\10\1\152\6\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\4\10\1\u010e"+
    "\27\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\u010f\21\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\u0110\27\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\1\u0111\33\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\22\10\1\u0112\11\10"+
    "\17\0\1\10\31\0\1\u0113\107\0\1\u0114\50\0\2\u0115"+
    "\1\104\1\0\5\u0115\1\0\1\u0115\2\0\1\u0115\1\0"+
    "\1\u0115\1\0\1\u0115\2\0\1\u0115\1\0\1\u0115\1\104"+
    "\3\0\1\u0115\45\0\1\u0116\1\103\1\104\2\0\3\u0116"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\43\0\13\10\1\0\1\10\2\0\3\10\1\u0117"+
    "\30\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\6\10\1\152\25\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\11\10\1\u0118\22\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\5\10\1\u0119\26\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\14\10\1\261"+
    "\17\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\10\1\u011a\32\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\10\1\167\32\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\3\10\1\340\30\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\7\10\1\261"+
    "\24\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\22\10\1\u011b\11\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\1\10\1\u011c\32\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\4\10\1\u011d\27\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\167\33\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\11\10"+
    "\1\u011e\22\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\6\10\1\u011f\25\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\2\10\1\262\31\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\10\1\u0120\32\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\12\10"+
    "\1\140\21\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\5\10\1\u0121\26\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\12\10\1\u0122\21\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\20\10\1\u0123\13\10"+
    "\17\0\1\10\7\0\1\u0124\123\0\1\u0125\56\0\2\u0126"+
    "\1\104\1\0\5\u0126\1\0\1\u0126\2\0\1\u0126\1\0"+
    "\1\u0126\1\0\1\u0126\2\0\1\u0126\1\0\1\u0126\1\104"+
    "\3\0\1\u0126\45\0\1\u0127\1\103\1\104\2\0\3\u0127"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\43\0\13\10\1\0\1\10\2\0\14\10\1\117"+
    "\17\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\1\u0128\33\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\20\10\1\277\13\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\4\10\1\u0129\27\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\15\10\1\245\16\10"+
    "\17\0\1\10\6\0\13\10\1\0\1\10\2\0\17\10"+
    "\1\164\14\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\12\10\1\u012a\21\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\1\u012b\33\10\17\0\1\10\6\0"+
    "\13\10\1\0\1\10\2\0\3\10\1\u012c\30\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\6\10\1\334"+
    "\25\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\12\10\1\u012d\21\10\17\0\1\10\7\0\1\u012e\124\0"+
    "\1\u0113\55\0\2\u012f\1\104\1\0\5\u012f\1\0\1\u012f"+
    "\2\0\1\u012f\1\0\1\u012f\1\0\1\u012f\2\0\1\u012f"+
    "\1\0\1\u012f\1\104\3\0\1\u012f\45\0\1\u0130\1\103"+
    "\1\104\2\0\3\u0130\1\110\1\111\1\112\6\0\1\112"+
    "\5\0\1\104\3\0\1\110\43\0\13\10\1\0\1\10"+
    "\2\0\6\10\1\262\25\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\6\10\1\u0131\25\10\17\0\1\10"+
    "\6\0\13\10\1\0\1\10\2\0\1\u0132\33\10\17\0"+
    "\1\10\6\0\13\10\1\0\1\10\2\0\1\10\1\242"+
    "\32\10\17\0\1\10\6\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\161\27\10\17\0\1\10\6\0\13\10\1\0"+
    "\1\10\2\0\4\10\1\u0133\27\10\17\0\1\10\10\0"+
    "\2\u0134\1\104\1\0\5\u0134\1\0\1\u0134\2\0\1\u0134"+
    "\1\0\1\u0134\1\0\1\u0134\2\0\1\u0134\1\0\1\u0134"+
    "\1\104\3\0\1\u0134\45\0\1\u0135\1\103\1\104\2\0"+
    "\3\u0135\1\110\1\111\1\112\6\0\1\112\5\0\1\104"+
    "\3\0\1\110\43\0\13\10\1\0\1\10\2\0\25\10"+
    "\1\336\6\10\17\0\1\10\6\0\13\10\1\0\1\10"+
    "\2\0\3\10\1\117\30\10\17\0\1\10\6\0\13\10"+
    "\1\0\1\10\2\0\22\10\1\u0136\11\10\17\0\1\10"+
    "\10\0\2\u0137\1\104\1\0\5\u0137\1\0\1\u0137\2\0"+
    "\1\u0137\1\0\1\u0137\1\0\1\u0137\2\0\1\u0137\1\0"+
    "\1\u0137\1\104\3\0\1\u0137\45\0\1\u0138\1\103\1\104"+
    "\2\0\3\u0138\1\110\1\111\1\112\6\0\1\112\5\0"+
    "\1\104\3\0\1\110\43\0\13\10\1\0\1\10\2\0"+
    "\4\10\1\u0139\27\10\17\0\1\10\10\0\2\u013a\1\104"+
    "\1\0\5\u013a\1\0\1\u013a\2\0\1\u013a\1\0\1\u013a"+
    "\1\0\1\u013a\2\0\1\u013a\1\0\1\u013a\1\104\3\0"+
    "\1\u013a\45\0\1\u013b\1\103\1\104\2\0\3\u013b\1\110"+
    "\1\111\1\112\6\0\1\112\5\0\1\104\3\0\1\110"+
    "\43\0\13\10\1\0\1\10\2\0\1\10\1\243\32\10"+
    "\17\0\1\10\10\0\2\u013c\1\104\1\0\5\u013c\1\0"+
    "\1\u013c\2\0\1\u013c\1\0\1\u013c\1\0\1\u013c\2\0"+
    "\1\u013c\1\0\1\u013c\1\104\3\0\1\u013c\45\0\1\u013d"+
    "\1\103\1\104\2\0\3\u013d\1\110\1\111\1\112\6\0"+
    "\1\112\5\0\1\104\3\0\1\110\45\0\2\u013e\1\104"+
    "\1\0\5\u013e\1\0\1\u013e\2\0\1\u013e\1\0\1\u013e"+
    "\1\0\1\u013e\2\0\1\u013e\1\0\1\u013e\1\104\3\0"+
    "\1\u013e\45\0\1\u013f\1\103\1\104\2\0\3\u013f\1\110"+
    "\1\111\1\112\6\0\1\112\5\0\1\104\3\0\1\110"+
    "\45\0\2\u0140\1\104\1\0\5\u0140\1\0\1\u0140\2\0"+
    "\1\u0140\1\0\1\u0140\1\0\1\u0140\2\0\1\u0140\1\0"+
    "\1\u0140\1\104\3\0\1\u0140\45\0\1\u0141\1\103\1\104"+
    "\2\0\3\u0141\1\110\1\111\1\112\6\0\1\112\5\0"+
    "\1\104\3\0\1\110\45\0\2\u0142\1\104\1\0\5\u0142"+
    "\1\0\1\u0142\2\0\1\u0142\1\0\1\u0142\1\0\1\u0142"+
    "\2\0\1\u0142\1\0\1\u0142\1\104\3\0\1\u0142\45\0"+
    "\1\u0143\1\103\1\104\2\0\3\u0143\1\110\1\111\1\112"+
    "\6\0\1\112\5\0\1\104\3\0\1\110\45\0\2\u0144"+
    "\1\104\1\0\5\u0144\1\0\1\u0144\2\0\1\u0144\1\0"+
    "\1\u0144\1\0\1\u0144\2\0\1\u0144\1\0\1\u0144\1\104"+
    "\3\0\1\u0144\45\0\1\u0145\1\103\1\104\2\0\3\u0145"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\45\0\2\u0146\1\104\1\0\5\u0146\1\0\1\u0146"+
    "\2\0\1\u0146\1\0\1\u0146\1\0\1\u0146\2\0\1\u0146"+
    "\1\0\1\u0146\1\104\3\0\1\u0146\45\0\1\u0147\1\103"+
    "\1\104\2\0\3\u0147\1\110\1\111\1\112\6\0\1\112"+
    "\5\0\1\104\3\0\1\110\45\0\2\u0148\1\104\1\0"+
    "\5\u0148\1\0\1\u0148\2\0\1\u0148\1\0\1\u0148\1\0"+
    "\1\u0148\2\0\1\u0148\1\0\1\u0148\1\104\3\0\1\u0148"+
    "\45\0\1\u0149\1\103\1\104\2\0\3\u0149\1\110\1\111"+
    "\1\112\6\0\1\112\5\0\1\104\3\0\1\110\47\0"+
    "\1\104\24\0\1\104\51\0\1\u014a\1\103\1\104\2\0"+
    "\3\u014a\1\110\1\111\1\112\6\0\1\112\5\0\1\104"+
    "\3\0\1\110\45\0\1\u014b\1\103\1\104\2\0\3\u014b"+
    "\1\110\1\111\1\112\6\0\1\112\5\0\1\104\3\0"+
    "\1\110\45\0\1\u014c\1\103\1\104\2\0\3\u014c\1\110"+
    "\1\111\1\112\6\0\1\112\5\0\1\104\3\0\1\110"+
    "\45\0\1\u014d\1\103\1\104\2\0\3\u014d\1\110\1\111"+
    "\1\112\6\0\1\112\5\0\1\104\3\0\1\110\45\0"+
    "\2\103\1\104\2\0\3\103\1\110\1\111\1\112\6\0"+
    "\1\112\5\0\1\104\3\0\1\110\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19955];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\44\1\6\11\4\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\0\2\1\1\11\1\0\4\1\1\0\102\1\1\0"+
    "\1\11\2\1\3\0\4\1\1\0\72\1\3\11\2\0"+
    "\42\1\2\0\27\1\2\0\17\1\2\0\10\1\1\11"+
    "\13\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public PythonLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength());
    }

    private Token token(TokenType type, int pairValue) {
        return new Token(type, yychar, yylength(), (byte)pairValue);
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 23: break;
        case 18: 
          { return token(TokenType.KEYWORD);
          }
        case 24: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 25: break;
        case 5: 
          { return token(TokenType.OPERATOR);
          }
        case 26: break;
        case 8: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 27: break;
        case 9: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 28: break;
        case 21: 
          { yybegin(ML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
          }
        case 29: break;
        case 14: 
          { tokenLength += yylength();
          }
        case 30: break;
        case 15: 
          { yybegin(YYINITIAL);
          }
        case 31: break;
        case 12: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 32: break;
        case 19: 
          { return token(TokenType.TYPE);
          }
        case 33: break;
        case 22: 
          { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return new Token(TokenType.STRING, tokenStart, tokenLength + 3);
          }
        case 34: break;
        case 11: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 35: break;
        case 16: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return new Token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 36: break;
        case 6: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 37: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 38: break;
        case 20: 
          { tokenLength += 2;
          }
        case 39: break;
        case 13: 
          { return token(TokenType.ERROR);
          }
        case 40: break;
        case 17: 
          { tokenLength ++;
          }
        case 41: break;
        case 10: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 42: break;
        case 2: 
          { return token(TokenType.COMMENT);
          }
        case 43: break;
        case 1: 
          { 
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
